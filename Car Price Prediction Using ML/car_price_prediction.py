# -*- coding: utf-8 -*-
"""Car_Price_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/kanupriya-11/Car-Price-Prediction-Using-ML/blob/main/Car_Price_Prediction.ipynb

Importing the Dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso 
from sklearn import metrics

"""Data Collection and Processing"""

#loading the data from csv file to pandas dataframe
car_dataset = pd.read_csv('/content/car data.csv')

#inspecting the first 5 rows of the dataset
car_dataset.head()

# Checking number of rows and columns
car_dataset.shape

car_dataset.info()

# Checking the number of missing values
car_dataset.isnull().sum()

#Checking the distribution of categorial data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encoding the Categorial Data"""

#Encoding because our system/machine better understands the numerical value as compared to the alphabetical 
# Encoding "Fuel_Type" Column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1,'CNG':2}},inplace=True)

# Encoding "Seller_Type" Column
car_dataset.replace({'Seller_Type':{'Dealer':0,'Individual':1}},inplace=True)

# Encoding "Transmission" Column
car_dataset.replace({'Transmission':{'Manual':0,'Automatic':1}},inplace=True)

car_dataset.head()

"""Splitting the data and Target"""

X = car_dataset.drop(['Car_Name','Selling_Price'],axis=1)
Y = car_dataset['Selling_Price']

print(X)

print(Y)

"""Splitting Training and Test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X, Y,test_size=0.1, random_state=2)

"""Model Training

1. Linear Regression
"""

#Loading the Linear Regression Model
lin_reg_model = LinearRegression()

lin_reg_model.fit(X_train,Y_train)

"""Model Evaluation

1. Prediction of Training Data
"""

# Prediction of Training Data
training_data_prediction = lin_reg_model.predict(X_train)

# R Square Error
error_score = metrics.r2_score(Y_train,training_data_prediction)
print("R Square Error: ", error_score)

"""Visualize the actual prices and Predicted prices"""

plt.scatter(Y_train,training_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices Vs Predicted Prices")
plt.show()

"""2. Prediction of Testing Data"""

# Prediction of Testing Data
testing_data_prediction = lin_reg_model.predict(X_test)

# R Square Error
error_score = metrics.r2_score(Y_test,testing_data_prediction)
print("R Square Error: ", error_score)

plt.scatter(Y_test,testing_data_prediction)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Prices")
plt.title("Actual Prices Vs Predicted Prices")
plt.show()

"""This is how we have Predicted our data
```
# Thankyou!
```


"""